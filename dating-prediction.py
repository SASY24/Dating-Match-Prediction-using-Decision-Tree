import streamlit as st
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="‡πÅ‡∏≠‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡∏ó‡∏ä‡πå", layout="wide")
st.title("üöÄ ‡πÅ‡∏≠‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡∏ó‡∏ä‡πå")
st.write("‡πÉ‡∏ä‡πâ Machine Learning ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡∏ó‡∏ä‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
@st.cache_data
def generate_sample_data():
    np.random.seed(42)
    n_samples = 1000
    
    data = {
        '‡∏≠‡∏≤‡∏¢‡∏∏': np.random.randint(18, 50, n_samples),
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á': np.random.randint(150, 190, n_samples),
        '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤': np.random.choice(['‡∏°‡∏±‡∏ò‡∏¢‡∏°', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å'], n_samples),
        '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': np.random.choice(['‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£', '‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£'], n_samples),
        '‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å': np.random.choice(['‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏î‡∏ô‡∏ï‡∏£‡∏µ', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£'], n_samples),
        '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ': np.random.randint(15000, 150000, n_samples),
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': np.random.choice(['‡πÇ‡∏™‡∏î', '‡∏´‡∏¢‡πà‡∏≤', '‡∏°‡πà‡∏≤‡∏¢'], n_samples)
    }
    return pd.DataFrame(data)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ó‡∏ä‡πå
def create_match_result(row):
    score = 0
    if row['‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'] in ['‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å']:
        score += 0.3
    if row['‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ'] > 50000:
        score += 0.2
    if row['‡∏≠‡∏≤‡∏ä‡∏µ‡∏û'] in ['‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£']:
        score += 0.2
    if row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡πÇ‡∏™‡∏î':
        score += 0.2
    if row['‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å'] in ['‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏Å‡∏µ‡∏¨‡∏≤']:
        score += 0.1
    return 1 if score > 0.5 else 0

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_resource
def train_model():
    df = generate_sample_data()
    df['match'] = df.apply(create_match_result, axis=1)
    
    le = LabelEncoder()
    categorical_columns = ['‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û', '‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']
    df_encoded = df.copy()
    
    for col in categorical_columns:
        df_encoded[col] = le.fit_transform(df_encoded[col])
    
    X = df_encoded.drop('match', axis=1)
    y = df_encoded['match']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = DecisionTreeClassifier(random_state=42, max_depth=5)
    model.fit(X_train, y_train)
    
    return model, le, categorical_columns

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
model, le, categorical_columns = train_model()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.sidebar.header("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
age = st.sidebar.slider("‡∏≠‡∏≤‡∏¢‡∏∏", 18, 50, 25)
height = st.sidebar.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)", 150, 190, 170)
education = st.sidebar.selectbox("‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", ['‡∏°‡∏±‡∏ò‡∏¢‡∏°', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡∏ï‡∏£‡∏µ', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÇ‡∏ó', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤‡πÄ‡∏≠‡∏Å'])
occupation = st.sidebar.selectbox("‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", ['‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', '‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£', '‡πÅ‡∏û‡∏ó‡∏¢‡πå', '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£'])
hobby = st.sidebar.selectbox("‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å", ['‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏î‡∏ô‡∏ï‡∏£‡∏µ', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£'])
income = st.sidebar.slider("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 15000, 150000, 30000, step=1000)
status = st.sidebar.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ['‡πÇ‡∏™‡∏î', '‡∏´‡∏¢‡πà‡∏≤', '‡∏°‡πà‡∏≤‡∏¢'])

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
def predict_match(model, age, height, education, occupation, hobby, income, status):
    input_data = pd.DataFrame({
        '‡∏≠‡∏≤‡∏¢‡∏∏': [age],
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á': [height],
        '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤': [education],
        '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': [occupation],
        '‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å': [hobby],
        '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ': [income],
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞': [status]
    })
    
    input_encoded = input_data.copy()
    for col in categorical_columns:
        input_encoded[col] = le.fit_transform(input_encoded[col])
    
    prediction = model.predict(input_encoded)
    probability = model.predict_proba(input_encoded)
    
    return prediction[0], probability[0]

# ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
if st.sidebar.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô"):
    result, prob = predict_match(
        model,
        age,
        height,
        education,
        occupation,
        hobby,
        income,
        status
    )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        if result == 1:
            st.success("‚ú® ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ!")
            st.balloons()
        else:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô")
            
    with col2:
        st.subheader("üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô")
        st.progress(max(prob))
        st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {max(prob) * 100:.2f}%")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    st.subheader("üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    profile_data = {
        "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠": ["‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á", "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", "‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å", "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
        "‡∏Ñ‡πà‡∏≤": [age, f"{height} ‡∏ã‡∏°.", education, occupation, hobby, f"{income:,} ‡∏ö‡∏≤‡∏ó", status]
    }
    st.table(pd.DataFrame(profile_data))

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
with st.expander("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏û‡∏ô‡∏µ‡πâ"):
    st.write("""
    ‡πÅ‡∏≠‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Machine Learning (Decision Tree) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡∏ó‡∏ä‡πå 
    ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    
    **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
    1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô"
    3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    
    **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    """)
